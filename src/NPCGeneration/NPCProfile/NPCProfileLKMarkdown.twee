:: NPCProfileLKMarkdown
<h1><<if $npcs[$currentPassage.key].isShallow === true || $npcs[$currentPassage.key].hasHistory === false>><<run setup.expandNPC($town, $npcs[$currentPassage.key])>><</if>><<set $currentNPC to $npcs[$currentPassage.key]>><<run console.groupCollapsed($currentNPC.name)>><<if $currentNPC.title !== "Mr" && $currentNPC.title !== "Ms">>$currentNPC.title <</if>>$currentNPC.name</h1>
\<<if def $currentNPC.key>>
    \<<button "Edit $currentNPC.name" NPCProfileEdit>><<run setup.history($currentNPC, "NPCProfileEdit", "Editing " + $currentNPC.name)>><</button>>
\<</if>> -- 
\<label name="Output option" for="listbox-currentnpcoutputoption"><<listbox "$currentNPC.outputOption">>
  <<option "Regular">>
  <<option "JSON">>
  <<option "GMBinder">>
\<</listbox>></label> --
\<<button "Output">>
  \<<switch $currentNPC.outputOption>>
  <<case "Regular">>
    <<run setup.history($currentNPC, "NPCProfile", $currentNPC.name)>><<goto "NPCProfile">>
  <<case "JSON">>
    <<run setup.history($currentNPC, "NPCProfileJSON", "JSON for " + $currentNPC.name)>><<goto "NPCProfileJSON">>
  <<case "GMBinder">>
    <<run setup.history($currentNPC, "NPCProfileGMBinder", "GMBinder Markdown for " + $currentNPC.name)>><<goto "NPCProfileGMBMarkdown">>
  <<case "LegendKeeper">>
    <<run setup.history($currentNPC, "NPCProfileLK", "LK Markdown for " + $currentNPC.name)>><<goto "NPCProfileLKMarkdown">>
  \<</switch>>
\<</button>>

<<if $currentNPC.title !== "Mr" && $currentNPC.title !== "Ms">><<print lib.firstCharacter($currentNPC.title)>> $currentNPC.name<<else>><<print lib.firstCharacter($currentNPC.name)>><</if>> is <<print lib.articles.output($currentNPC.age)>>, $currentNPC.ageYears years old $currentNPC.malefemale $currentNPC.raceAdjective $currentNPC.profession. <<print $currentNPC.heshe.toUpperFirst()>> is $currentNPC.height (<<print setup.metricHeight($currentNPC.heightInches, settings.showMetric)>>) and $currentNPC.weight at <<print setup.metricWeight($currentNPC, settings.showMetric)>>. $currentNPC.firstName has $currentNPC.eyes eyes<<if def $currentNPC.beard>> and <<print lib.articles.output($currentNPC.beard)>>,<</if>> with $currentNPC.skinColour skin. The most notable physical trait of $currentNPC.firstName is that $currentNPC.heshe has $currentNPC.physicalTrait.
<<set _lifestyleStandard to lib.npcLifestyleStandard($town, $currentNPC)>>
$currentNPC.firstName $currentNPC.trait. 
\<<if def $currentNPC.vocalPattern>><<print $currentNPC.heshe.toUpperFirst()>> $currentNPC.vocalPattern. <</if>>
\When $currentNPC.heshe is relaxed, $currentNPC.heshe is $currentNPC.calmTrait. In moments of stress, $currentNPC.heshe becomes $currentNPC.stressTrait. 
\<<if $currentNPC.knownLanguages.length == 2>>$currentNPC.firstName knows $currentNPC.knownLanguages[0] and <<print $currentNPC.knownLanguages[1]>>.<</if>>

<<if lib.isBreakingGenderNorms($town, $currentNPC) && $currentNPC.roll.professionLuck > 0>>Despite sexism against $currentNPC.himher, <<elseif lib.isBreakingGenderNorms($town, $currentNPC) && $currentNPC.roll.professionLuck < 0>>Perhaps due to sexism, <</if>>$currentNPC.professionSuccess, with a background of being <<print lib.articles.output($currentNPC.background)>>. 
\<<if lib.socialClass[$currentNPC.socialClass].lifestyle.includes(_lifestyleStandard[1])>>
  \<<print $currentNPC.heshe.toUpperFirst()>> belongs to the <<print lib.createTippyFull($currentNPC.firstName + " " + _lifestyleStandard[3], $currentNPC.socialClass)>> social class
\<<else>>
  \<<print $currentNPC.heshe.toUpperFirst()>> belongs to the $currentNPC.socialClass social class, but _lifestyleStandard[3]
\<</if>>. 
\Religion-wise, $currentNPC.firstName is <<print lib.articles.output($currentNPC.religion.strength)>>. 
\$currentNPC.firstName currently has $currentNPC.pockets in $currentNPC.hisher pockets, and <<money $currentNPC.wealth>> to $currentNPC.hisher name. 
\In combat, $currentNPC.heshe uses $currentNPC.weapon. 
\<<if def $currentNPC.doesnt>>$currentNPC.doesnt<</if>>
\<<if $currentNPC.sexuality !== 'heterosexual'>>
    \<<print $currentNPC.heshe.toUpperFirst()>> is $currentNPC.sexuality
    \<<if $currentNPC.partnerID>>
        \, and has a <<print $npcs[$currentNPC.partnerID].marriageNoun>>, <<profile $npcs[$currentNPC.partnerID]>>.
    \<</if>>
  \<<elseif $currentNPC.partnerID>>$currentNPC.firstName has <<print lib.articles.output($npcs[$currentNPC.partnerID].marriageNoun)>>, <<profile $npcs[$currentNPC.partnerID]>>.
  \<</if>>

<<if def $currentNPC.note >>$currentNPC.note<</if>>
"""## History """

"""### Early Life"""
/quote "$currentNPC.childhoodMemories."
$currentNPC.firstName was born $currentNPC.birthplace, and was raised by $currentNPC.familyUnit<<if $currentNPC.siblingNumber == 0>> as an only child.<<elseif $currentNPC.siblingNumber == 1>> with $currentNPC.hisher brother.<<else>>, along with $currentNPC.hisher $currentNPC.siblingNumber siblings.<</if>> <<print $currentNPC.heshe.toUpperFirst()>> had <<print lib.articles.output($currentNPC.familyLifestyle)>> upbringing in $currentNPC.familyHome. <<if $currentNPC.knewParents is false>>$currentNPC.firstName didn't know $currentNPC.hisher parents growing up.<</if>><<if $currentNPC.parentalLineage>>$currentNPC.parentalLineage.<</if>> 

"""### Becoming """ <<print lib.articles.output($currentNPC.profession)>>

$currentNPC.backgroundOrigin $currentNPC.professionOrigin $currentNPC.bond $currentNPC.ideal

"""### Life Events"""

\<<print setup.getLifeEvents($currentNPC)>>

<<run console.groupEnd()>><<run console.log($currentNPC)>>