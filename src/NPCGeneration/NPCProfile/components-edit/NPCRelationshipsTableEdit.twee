:: NPCRelationshipsTableEdit
<<nobr>>
<div class='classTable'>
  <details><summary>Relationships</summary>
  <<details "NPCAddRelationship" "Add new relationship">>
  <table>
    <tr>
      <th>Name</th>
      <th>Occupation</th>
      <th>Relationship</th>
      <th>Reciprocal Relationship</th>
      <th>Description of Relationship</th>
      <th>Delete Relationship</th>
    </tr>
    <<for _index, _relationship range $town.npcRelations[$currentNPC.key]>>
    
    <<set _profession to lib.findProfession($town, $npcs[_relationship.targetNpcKey])>>
    <<set _reciprocalIndex to $town.npcRelations[_relationship.targetNpcKey].findIndex(r => r.targetNpcKey === $currentNPC.key)>>
    <<set _reciprocal to $town.npcRelations[_relationship.targetNpcKey].filter(r => r.targetNpcKey === $currentNPC.key)[0]>>
    <<capture _index, _reciprocal, _reciprocalIndex>>
    <tr>
      <td><<profile $npcs[_relationship.targetNpcKey]>></td>
      <td><<print lib.createTippyFull(_profession.description.toUpperFirst(), $npcs[_relationship.targetNpcKey].profession.toUpperFirst())>></td>
      <td><<textbox "$town.npcRelations[$currentNPC.key][_index].relation" _relationship.relation>></td>
      <td><<textbox "$town.npcRelations[_relationship.targetNpcKey][_reciprocalIndex].relation" _reciprocal.relation>></td>
      <td><<textbox "$town.npcRelations[$currentNPC.key][_index].description" _relationship.description>></td>
      <td><<link "x">><<set _deleted to $npcs[_relationship.targetNpcKey]>><<run $town.npcRelations[_relationship.targetNpcKey].splice(_reciprocalIndex, 1)>><<run $town.npcRelations[$currentNPC.key].splice(_index, 1)>><<notify 5000>>Deleted _deleted.name's relationship.<</notify>><<update>><</link>></td>
    </tr>
    <</capture>>
    <</for>>
    <<set _entityRelationships to lib.findReciprocalRelationships($town, null, $npcs[$currentNPC.key], 'building')>>
<<if _entityRelationships.length > 0>>
  <tr>
    <th>Building Name</th>
    <th>Building Type</th>
    <th>Relationship</th>
    <th>Delete Relationship</th>
  </tr>
  <<for _buildingIndex, _buildingRelationship range _entityRelationships>>
    <<set _building to lib.findBuilding($town, _buildingRelationship.otherKey)>>
    <<capture _building, _buildingIndex>>
    <td><<profile _building _building.name>></td>
    <td><<print lib.toTitleCase(_building.wordNoun)>></td>
    <td><<if _buildingRelationship.description || _buildingRelationship.reciprocalRelationship>>
      <<print lib.createTippyFull(
        _buildingRelationship.description || 
        lib.findInArray($town.buildings, "key", _buildingRelationship.otherKey).name + " is " + lib.articles.output(_buildingRelationship.reciprocalRelationship) + " to " + $npcs[_buildingRelationship.npcKey].firstName, 
        lib.toTitleCase(_buildingRelationship.reciprocalRelationship || _buildingRelationship.relationship))>>
    <<else>>
      <<print lib.toTitleCase(_buildingRelationship.reciprocalRelationship || _buildingRelationship.relationship)>>
    <</if>></td>
    <td><<link "x">><<run $town.buildingRelations.splice(lib.findIndexOfReciprocalRelationship($town, _building, $currentNPC), 1)>><<update>><</link>></td>
  <</capture>><</for>>
<</if>>
  </table>
  </details></div>
<</nobr>>